/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
****                 temperature_compute.cpp:                 ****
****       simple script to compute temperature in MeV,       ****
****                 given Nt e a[fm] values.                 ****
****                (author = Serena Bruzzesi)                ****
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
//AT THE BOTTOM OF THE CODE SOME OUTPUTS TO KEEP IN MIND;

//-----------------------------------------------------------------
//HEADERS && LIBRARY:

#include "../library.h"

//-----------------------------------------------------------------
//GLOBAL CONSTANTS:

const double hbar_c = 197.3269804; //MeV * fm

//-----------------------------------------------------------------
//MAIN:

int main() {

	//-----------------------------------------------------------------
	//VARIABLES TO SET:
	
	int Nt = 8; //number of temporal lattice sites

	vector<double> afm = {
		0.1654988586,
		0.1502786674,
		0.1372486351,
		0.1260686596,
		0.1164315868,
		0.1080632106,
		0.1007222727,
		0.0942004629,
		0.0883224188,
		0.0829457261,
		0.0779609184,
		0.0732914774,
		0.0688938325,
		0.0647573611,
		0.0609043889,
		0.0568923699
	}; //a[fm] //BE CAREFUL TO CHOOSE IT WELL;


	//-----------------------------------------------------------------
	//DO NOT MODIFY:

	double T_value;//[in MeV], computed as (hbar*c[MeV*fm])/(Nt*a[fm])

	cout << "#a[fm] \t T[MeV]" << endl;

	for (int ii = 0; ii < (afm.size()); ii++) {
		T_value = hbar_c / (Nt * afm[ii]);
		cout << afm[ii] << "\t" << T_value << "\t" << endl;
	}

	return 0;
}


/*
PER MPI = 800 MEV:
vector<double> afm = { 0.1806154387,
		0.1710305482,
		0.1586635474,
		0.1476200601,
		0.1377037468,
		0.1290036669,
		0.1249189781,
		0.1139049357,
		0.1073456174,
		0.1013484202,
		0.0958468116,
		0.0907797794,
		0.0860918322,
		0.0817329985,
		0.0776588275,
		0.0738303888,
		0.0702142723,
		0.0667825883,
		0.0635129674,
		0.0609567905
	}; //a[fm] //BE CAREFUL TO CHOOSE IT WELL;


OUTPUT PER NT=8:
#a[fm]   T[MeV]
0.180615        136.566
0.171031        144.219
0.158664        155.46
0.14762 167.09
0.137704        179.123
0.129004        191.203
0.124919        197.455
0.113905        216.548
0.107346        229.78
0.101348        243.377
0.0958468       257.347
0.0907798       271.711
0.0860918       286.507
0.081733        301.786
0.0776588       317.618
0.0738304       334.088
0.0702143       351.294
0.0667826       369.346
0.063513        388.36
0.0609568       404.645

E NT = 256:
#a[fm]   T[MeV]
0.180615        4.26768
0.171031        4.50685
0.158664        4.85813
0.14762 5.22157
0.137704        5.59759
0.129004        5.97509
0.124919        6.17047
0.113905        6.76712
0.107346        7.18062
0.101348        7.60553
0.0958468       8.04209
0.0907798       8.49097
0.0860918       8.95333
0.081733        9.43081
0.0776588       9.92558
0.0738304       10.4403
0.0702143       10.9779
0.0667826       11.5421
0.063513        12.1362
0.0609568       12.6452
*/

/*
PER MPI = 1500 MEV:
	vector<double> afm = {
		0.1654988586,
		0.1502786674,
		0.1372486351,
		0.1260686596,
		0.1164315868,
		0.1080632106,
		0.1007222727,
		0.0942004629,
		0.0883224188,
		0.0829457261,
		0.0779609184,
		0.0732914774,
		0.0688938325,
		0.0647573611,
		0.0609043889,
		0.0568923699
	}; //a[fm] //BE CAREFUL TO CHOOSE IT WELL;


OUTPUT PER NT=8:
#a[fm]   T[MeV]
0.165499        149.04
0.150279        164.134
0.137249        179.717
0.126069        195.654
0.116432        211.849
0.108063        228.254
0.100722        244.89
0.0942005       261.844
0.0883224       279.271
0.0829457       297.374
0.0779609       316.388
0.0732915       336.545
0.0688938       358.027
0.0647574       380.897
0.0609044       404.993
0.0568924       433.553
*/